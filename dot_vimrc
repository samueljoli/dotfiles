" -----------------------------------------------------------------------------
" Vim >= 8. This assume you to have Plug installed.
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" Plugins
" -----------------------------------------------------------------------------
call plug#begin()

Plug 'morhetz/gruvbox'                              " colorscheme
Plug 'luochen1990/rainbow'                          " colored brackets
Plug 'sheerun/vim-polyglot'                         " language syntax highlighting
Plug 'jelera/vim-javascript-syntax'                 " JS syntax highlighting
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " fuzzy finder
Plug 'junegunn/fzf.vim'
Plug 'garbas/vim-snipmate'                          " snippets
Plug 'MarcWeber/vim-addon-mw-utils'                 " -- snippets dep
Plug 'tomtom/tlib_vim'                              " -- snippets dep
Plug 'honza/vim-snippets'
Plug 'vim-scripts/AutoComplPop'                     " Show autocomplete menu Automatically
Plug 'tomtom/tcomment_vim'                          " Commenting
Plug 'tpope/vim-surround'                           " surroundings: parentheses, brackets, quotes, etc
Plug 'neoclide/coc.nvim', {'branch': 'release'}     " LSP language server protocol
Plug 'puremourning/vimspector'                      " Debugger integration
Plug 'davidhalter/jedi-vim'                         " Python autocompletion
Plug 'mhinz/vim-signify'                            " Git diff
Plug 'psf/black', { 'branch': 'stable' }            " Python formatter
Plug 'tpope/vim-fugitive'                           " Git
Plug 'tpope/vim-rhubarb'                            " Hub for Git (enables :GBrowse from vim-fugitive)

call plug#end()

function! GetSnipsInCurrentScope()
    let word = matchstr(getline('.'), '\S\+\%'.col('.').'c')
    let list = snipMate#GetSnippetsForWordBelowCursor('', '*',  0)
    let result = {}
    for [trigger, snips] in list
        if len(snips) == 1
            let result[trigger] = values(snips)[0]
        else
            let result[trigger] = items(snips)
        endif
    endfor
    return result
endfunction

" -------------------- Global configs --------------------
set noswapfile

" Load zshrc alias commands in vim (EXPERIMENTAL)
" autocmd vimenter * let &shell='/bin/zsh -i'

"File directory
let g:netrw_banner = 0 "remove directory banner
let g:netrw_winsize = 25 "set directory window to 25% of screen
let g:netrw_liststyle = 3 "set list view style to 3
let g:netrw_altv = 1 "?
" let g:netrw_browse_split = 0 "close directory when opening a file
" If you don't have a hide list and just want to use gh's:
let ghregex='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide=ghregex


"File navigation
set relativenumber
set rnu
set ruler " show the cursor position all the time
set number
set numberwidth=5
set mouse=a       " Allow scrolling using mousepad

"Tab
set smartindent
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab

" GF (Go to file)
set path+=$PWD/node_modules " Enable jumping into node_modules

set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

set backspace=indent,eol,start "Fix delete in insert mode

set hlsearch "Highlight all search matches

set re=0 "Set redraw to 0. Configured because Typescript syntax highlighting is broken

" open new windows below the current window
set splitbelow
" open new windowns to the right
set splitright

" -------------------- Mappings --------------------
" j/k/h/l to switch panes
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" Tab complete
" inoremap <Tab> <C-P>

" map leader to spacebar
let mapleader = "\<Space>"

" map control + p for word search
noremap <C-w> :Ag<Enter>

" map control + f for file search
noremap <C-f> :Files<Enter>

" open silver searcher for word under cursor
nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>

" terminal
map <Leader>t :term ++close<CR>
tmap <Leader>t <c-w>:term ++close<CR>

" convenience
nnoremap <silent> <leader>e :exit<cr>

" -------------------- Syntax --------------------
syntax on
syntax enable
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" -------------------- Plug Configuration --------------------

" let g:polyglot_disabled = ['javascript.plugin']
let g:vim_svelte_plugin_use_sass = 1

let g:gruvbox_contrast_dark = "hard"
colorscheme gruvbox
let g:rainbow_active = 1
let g:rainbow_conf = {
\	'ctermfgs': ['blue', 'darkgray', 'lightgray']
\}
let g:snipMate = { 'snippet_version' : 1 }


" ======================== Coc ========================

" https://github.com/neoclide/coc-snippets
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackSpace() ? "\<TAB>" :
      \ coc#refresh()
function! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
let g:coc_snippet_next = '<tab>'
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
let g:coc_disable_startup_warning = 1
let g:coc_global_extensions = ["coc-pyright", "coc-sh", "coc-cmake", "coc-go", "coc-markdownlint", "coc-tsserver", "coc-json"]

nnoremap <silent> <leader>cl :CocDiagnostics<cr>
nnoremap <silent> <leader>ch :call CocAction('doHover')<cr>
nnoremap <silent> <leader>cf <plug>(coc-codeaction-cursor)
nnoremap <silent> <leader>ca <plug>(coc-fix-current)

nmap <silent> [c <plug>(coc-diagnostic-prev)
nmap <silent> ]c <plug>(coc-diagnostic-next)

nmap <silent> [c <plug>(coc-diagnostic-prev)
nmap <silent> ]c <plug>(coc-diagnostic-next)

" ======================== Fugitive ========================
nnoremap <silent> <leader>gb :Git blame<cr>
nnoremap <silent> <leader>gb :Git blame<cr>
nnoremap <silent> <leader>gy :.GBrowse!<CR>
xnoremap <silent> <leader>gy :'<'>GBrowse!<CR>

" ======================== Vimspector ========================

nnoremap <leader>da :call vimspector#Launch()<CR>
nnoremap <leader>dx :call vimspector#Reset()<CR>
nnoremap <leader>dh :call vimspector#ToggleBreakpoint()<CR>
nnoremap <S-j> :call vimspector#StepOver()<CR>
nnoremap <S-k> :call vimspector#StepOut()<CR>
nnoremap <S-l> :call vimspector#StepInto()<CR>

let g:vimspector_base_dir = expand('$HOME/.config/vimspector')

" ======================== Jedi ========================

" let g:jedi#auto_initialization = 0
let g:jedi#use_splits_not_buffers = "left"
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_stubs_command = "<leader>s"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

" ======================== Black (python) ========================
" format on save
augroup black_on_save
  autocmd!
  autocmd BufWritePre *.py Black
augroup end
